/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> val;

    void dfs(TreeNode *curr) {
        if (curr == nullptr) return;
        dfs(curr->left);
        val.push_back(curr->val);
        dfs(curr->right);
    }

    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {
        dfs(root);
        vector<vector<int>> ans;

        for (auto v : queries) {
            int lo = 0, hi = val.size() - 1;
            int floor = -1, ceil = -1;

            // Find floor (max value <= v)
            while (lo <= hi) {
                int mid = lo + (hi - lo) / 2;
                if (val[mid] <= v) {
                    floor = val[mid];
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            }

            lo = 0, hi = val.size() - 1;
            // Find ceil (min value >= v)
            while (lo <= hi) {
                int mid = lo + (hi - lo) / 2;
                if (val[mid] >= v) {
                    ceil = val[mid];
                    hi = mid - 1;
                } else {
                    lo = mid + 1;
                }
            }

            ans.push_back({floor, ceil});
        }
        return ans;
    }
};
