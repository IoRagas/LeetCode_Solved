/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans = 0;
    int func(TreeNode* curr, int val)
    {
        if(curr == nullptr) return 0;
        if(curr->right == nullptr && curr->left == nullptr)
            if(curr->val == val) //Current Node Values Matches The Root Node Value
                return 1;
        int left = func(curr->left, curr->val);
        int right = func(curr->right, curr->val);
        int sum = left + right ;
        ans = max(ans, sum);
        if(curr->val == val)
            return 1 + max(left, right);
        return 0;
    }
    int longestUnivaluePath(TreeNode* root) {
        if(root == nullptr) return 0;
        if(root->left == nullptr && root->right == nullptr) return 0;
        func(root, 99999);
        return ans;
    }
};
