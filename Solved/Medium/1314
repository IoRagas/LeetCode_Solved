//Simple 2d prefix Matrix
class Solution {
public:
     vector<vector<int>> table;
    void NumMatrix(vector<vector<int>>& matrix) {
        table = matrix;
        for(int i = 0; i < table.size(); i++)
        {
            for(int j = 0; j < table[0].size(); j++)
            {
                table[i][j] = table[i][j] +  ( i - 1 >= 0 ? table[i-1][j] : 0) + ( j - 1 >= 0 ? table[i][j - 1] : 0) - ( i - 1 >=0  && j - 1 >= 0 ? table[i-1][j-1] : 0);
            }
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        int ans = 0;
        ans = table[row2][col2] - (row1 - 1 >= 0 ? table[row1-1][col2] : 0) - (col1 - 1 >= 0 ? table[row2][col1 - 1] : 0) + (row1 - 1 >= 0 && col1 -1 >= 0 ? table[row1-1][col1-1] : 0);
        return ans;
    }
    
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        NumMatrix(mat);
        vector<vector<int>> ans(mat.size(), vector<int>(mat[0].size()));
        for(int i = 0; i < mat.size(); i++)
        {
            for(int j = 0; j < mat[0].size(); j++)
            {
                int r1, c1, r2, c2;
                r1 = (i - k >= 0 ? i-k: 0);
                c1 = (j - k >= 0 ? j-k: 0);
                r2 = (i+k < mat.size() ? i + k : mat.size() - 1);
                c2 = (j+k < mat[0].size() ? j + k : mat[0].size() - 1);
                ans[i][j] = sumRegion(r1, c1, r2, c2);
            }
        }
        
        return ans;
    }
    


};
