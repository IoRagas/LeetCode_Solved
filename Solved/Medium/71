class Solution {
public:
    string simplifyPath(string path) {
        stack<string> table; //Will Store Each Directory

        string directory = "";
        for(int i = 0; i < path.size();i++)
        {
            if(path[i] != '/')
            directory += path[i];
            //First Rule
            if(directory == "." &&  ( (i + 1 < path.size() && path[i + 1] == '/') || i + 1 == path.size() ))
            {
                directory = "";
                i += 1;
                continue;
            }
            if(directory == "" && path[i] == '/')
                continue;
            if(directory == ".." && ( (i + 1 < path.size() && path[i + 1] == '/') || i + 1 == path.size()  )){
                //cout<<"Hello";
                //Move back to Parent Directory
                directory = "";
                if(!table.empty()){
                    table.pop();
                }
                i += 1;
                continue;
            }
            if(directory != "" && ( path[i] == '/' || i + 1 == path.size()))
            {
                cout<<directory<<endl;
                table.push(directory);
                directory = "";
                continue;
            }
                
        }
       string ans = "";
       while(table.empty() == false)
       {
            ans = "/" + table.top() + ans;
            table.pop();
          //  cout<<ans<<endl;
       }

        if(ans == "") ans = "/";
       return ans;
    }
};
