//Use Sliding Window, while ensuring the count of 0 is at max k
class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int ans = 0;
        int start = 0; int count = 0;
        int end = 0; int flips = 0;
        while(end < nums.size())
        {
            while(  end < nums.size() && ( flips < k || nums[end] == 1))
            {
                if(nums[end] == 0){
                    flips++;
                }  
                count++;
                end++;
            }
            ans = max(ans, count);
            if(flips >= k)
            {
                while( start < nums.size() && nums[start] == 1)
                {
                    count--;
                    start++;
                } 
                start++;
                flips--;
                count--;
            }
        }
        ans = max(ans, count);
        return ans;
    }
};
