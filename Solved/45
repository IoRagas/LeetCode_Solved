class Solution {
public:
    int jump(vector<int>& nums) {
        int ans = 0;

        vector<int> table(nums.size(), 200000);
        stack<pair<int, int>> s;
        s.push(make_pair(0, 0)); //Starting from Index 0 with 0 steps
        while(s.empty() == false){
            pair<int, int> curr = s.top();
            s.pop();
            if(table[curr.first] <= curr.second)
                continue;
            table[curr.first] = curr.second;
            int n = nums[curr.first]; //Next Step Limit
            int k = curr.second + 1;
            int m = 0;
            for(int i = n; i > 0 ; i--)
            {
                int val = curr.first + i;
                if(val >= nums.size()) continue;
                if(i + nums[val] < m) continue; 
                m = max(m, i + nums[val]);
                if(k > table[val]) continue;
                if(nums[val] == 0 && val != nums.size() - 1) continue;
                s.push(make_pair(val, k));
            }
        }
        return table[table.size() - 1];
    }
};
